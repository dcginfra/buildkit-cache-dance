name: Inject Cache
description: "Injects the cached data into the docker build(x|kit) process"
inputs:
  cache-source:
    default: cache
    description: "Where the cache is stored in the calling workspace. Default: `cache`"
  scratch-dir:
    default: scratch
    description: "Where the action is stores some temporary files for its processing. Default: `scratch`"
  mounts:
    description: Docker build cache mounts list
    required: true

runs:
  using: composite
  steps:
    - name: Clean Directories
      shell: bash
      run: |
        rm -Rf ${{ inputs.scratch-dir }} && mkdir -p ${{ inputs.scratch-dir }} ${{ inputs.cache-source }}

    - name: Prepare Timestamp for Layer Cache Busting
      shell: bash
      run: |
        date --iso=ns | tee ${{ inputs.cache-source }}/buildstamp

    - name: Prepare list of cache mounts for Dancefile
      uses: actions/github-script@v6
      id: mounts
      with:
        script: |
          const mountIds = '${{ inputs.mounts }}'.split(/[\r\n,]+/);
          
          const cacheMountArgs = mountIds.map((mount) => (
            `--mount=type=cache,sharing=shared,id=${mount},target=/cache-mounts/${mount} \`
          )).join('\n');
          
          const s5commands = mountIds.map((mount) => (
            `sync --no-follow-symlinks s3://platform-runner-cache/cache-mounts/${mount}/* /cache-mounts/${mount}`
          )).join('\n');

          return {
            cacheMountArgs,
            s5commands,
          };

    - name: Prepare Dancefile to Access Caches
      shell: bash
      run: |
        cat > ${{ inputs.scratch-dir }}/Dancefile.inject << 'EOF'
        FROM peakcom/s5cmd:v2.1.0
        COPY buildstamp buildstamp
        RUN ${{ steps.mounts.outputs.cacheMountArgs }}
            echo '${{ steps.mounts.outputs.s5commands }}' | /s5cmd --stat run && \
            chmod 777 -R /cache-mounts || true && \
            find /cache-mounts -exec touch -d `date +%Y.%m.%d-%H:%M:%S -d@"$((\`date +%s\`-2))"` {} +
        EOF
        cat ${{ inputs.scratch-dir }}/Dancefile.inject

    - name: Inject Data into buildx context
      shell: bash
      run: |
        docker buildx build \
          --platform ${{ steps.platforms.outputs.result }} \
          --file ${{ inputs.scratch-dir }}/Dancefile.inject \
          ${{ inputs.cache-source }}

    - name: Clean Directories
      shell: bash
      run: |
        sudo rm -rf ${{ inputs.cache-source }}
